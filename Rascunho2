/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.pilates.academiaPilates.controller;

import br.com.pilates.academiaPilates.models.Agenda;
import br.com.pilates.academiaPilates.models.Cliente;
import br.com.pilates.academiaPilates.models.Profissional;
import br.com.pilates.academiaPilates.models.Servico;
import br.com.pilates.academiaPilates.repository.AgendaRepository;
import br.com.pilates.academiaPilates.security.UserSS;
import br.com.pilates.academiaPilates.service.AgendaService;
import br.com.pilates.academiaPilates.service.ClienteService;
import br.com.pilates.academiaPilates.service.ProfissionalService;
import br.com.pilates.academiaPilates.service.ServicoService;
import br.com.pilates.academiaPilates.service.UserService;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

/**
 *
 * @author daniel
 */
@RestController
@RequestMapping(path = "${baseUrl}/sistema/agenda")
public class AgendaController {

    @Value("${baseUrl}")
    private String baseUrl;

    @Autowired
    AgendaService agendaService;

    @Autowired
    AgendaRepository ar;

    @Autowired
    ProfissionalService profissionalService;
    Profissional profissional;

    @Autowired
    ClienteService clienteService;
    Cliente cliente;

    @Autowired
    ServicoService servicoService;
    Servico servico;

    public UserSS user() {
        return UserService.authenticated();
    }

    @GetMapping(value = "/all")
    public List<Agenda> jsonAgenda() {
        try {
            List<Agenda> agendas = agendaService.listaAgendasIniciandoDoMesAtual();

            return agendas;

        } catch (Exception ioex) {
            System.out.println(ioex.getMessage());
        }
        return null;
    }

    @GetMapping(value = "/all/cancelado")
    public List<Agenda> jsonAgendaCancelada() {
        try {
            List<Agenda> agendas = agendaService.listarAgendasCanceladas();

            return agendas;

        } catch (Exception ioex) {
            System.out.println(ioex.getMessage());
        }
        return null;
    }

    @GetMapping(value = "/json-montar-agenda-por-cliente/{idCliente}")
    public ArrayList<Agenda> jsonMontarAgendaPorCliente(@PathVariable("idCliente") Long idCliente) {

        try {
            ArrayList<Agenda> agendas = new ArrayList<Agenda>();
            agendas = agendaService.listaAgendaPorCliente(clienteService.clientePorId(idCliente));

            return agendas;

        } catch (Exception ioex) {
            System.out.println(ioex.getMessage());
        }
        return null;
    }

    @GetMapping(value = "/json-montar-agenda-por-profissional/{idProfissional}")
    public ArrayList<Agenda> jsonMontarAgendaPorProfissional(@PathVariable("idProfissional") Long idProfissional) {

        try {
            ArrayList<Agenda> agendas = new ArrayList<Agenda>();
            agendas = agendaService.listaAgendaPorProfissional(profissionalService.profissionalPorId(idProfissional));

            return agendas;

        } catch (Exception ioex) {
            System.out.println(ioex.getMessage());
        }
        return null;
    }

    @GetMapping(value = "")
    public ModelAndView montarAgenda() {
        ModelAndView mv = new ModelAndView("agenda/agenda");
        Agenda agenda = new Agenda();
        mv.addObject("agenda", agenda);
        List<Agenda> agendas = agendaService.listaAgendasIniciandoDoMesAtual();
        mv.addObject("listaProfissional", profissionalService.listaProfissionalAtivo());
        mv.addObject("listaCliente", clienteService.listaClientesAtivos());
        mv.addObject("listaServico", servicoService.listaServicosAtivos());

        mv.addObject("linkMontarAgenda", "./agenda/all");
        mv.addObject("linkEditarAgenda", "./agenda/editar/");
        mv.addObject("todasAgendas", agendas);
        mv.addObject("abrirModal", false);

        return mv;
    }

    @GetMapping(value = "/cancelado")
    public ModelAndView montarAgendaCancelada() {
        ModelAndView mv = new ModelAndView("agenda/agenda");
        Agenda agenda = new Agenda();
        mv.addObject("agenda", agenda);
        List<Agenda> agendas = agendaService.listarAgendasCanceladas();
        mv.addObject("listaProfissional", profissionalService.listaProfissionalAtivo());
        mv.addObject("listaCliente", clienteService.listaClientesAtivos());
        mv.addObject("listaServico", servicoService.listaServicosAtivos());

        mv.addObject("linkMontarAgenda", ".././agenda/all/cancelado");
        mv.addObject("linkEditarAgenda", ".././agenda/editar/");
        mv.addObject("todasAgendas", agendas);
        mv.addObject("abrirModal", false);

        return mv;
    }

    @GetMapping(value = "/editar/{idAgenda}")
    public ModelAndView montarAgendaParaEditar(@PathVariable("idAgenda") Long idAgenda) {
        ModelAndView mv = new ModelAndView("agenda/agenda");

        Agenda agenda = new Agenda();
        agenda = agendaService.agendaPorId(idAgenda);
        mv.addObject("agenda", agenda);

        mv.addObject("listaCliente", clienteService.listaClientesAtivos());
        mv.addObject("listaProfissional", profissionalService.listaProfissionalAtivo());
        mv.addObject("cliente", agenda.getCliente());
        mv.addObject("listaServico", servicoService.listaServicosAtivos());

        List<Agenda> agendas = agendaService.listaAgendasIniciandoDoMesAtual();
        mv.addObject("todasAgendas", agendas);
        mv.addObject("linkMontarAgenda", "./all");
        mv.addObject("abrirModal", true);
        mv.addObject("nomeRealizouCadastro", agenda.getNomeRealizouCadastro());
        mv.addObject("dataRealizouCadastro", agenda.getDataRealizouCadastro());
        mv.addObject("horaRealizouCadastro", agenda.getHoraRealizouCadastro());

        return mv;
    }

    @GetMapping(value = "/profissional/{idProfissional}")
    public ModelAndView montarAgendaPorProfissional(@PathVariable("idProfissional") Long idProfissional) {
        ModelAndView mv = new ModelAndView("agenda/agenda");

        Agenda agenda = new Agenda();
        mv.addObject("agenda", agenda);
        profissional = profissionalService.profissionalPorId(idProfissional);
        mv.addObject("listaCliente", clienteService.listaClientesAtivos());
        mv.addObject("listaProfissional", profissionalService.listaProfissionalAtivo());
        mv.addObject("profissional", profissional);
        mv.addObject("agendaProfissional", agendaService.listaAgendaPorProfissional(profissional));
        System.out.println("AGenda por profissional : " + profissional);

        mv.addObject("listaServico", servicoService.listaServicosAtivos());

        mv.addObject("linkMontarAgenda", ".././json-montar-agenda-por-profissional/" + idProfissional);
        mv.addObject("linkEditarAgenda", ".././editar/");
        mv.addObject("abrirModal", false);
        return mv;
    }

    @GetMapping(value = "/cliente/{idCliente}")
    public ModelAndView montarAgendaPorCliente(@PathVariable("idCliente") Long idCliente) {
        ModelAndView mv = new ModelAndView("agenda/agenda");

        Agenda agenda = new Agenda();
        cliente = clienteService.clientePorId(idCliente);
        agenda.setCliente(cliente);
        mv.addObject("agenda", agenda);

        mv.addObject("listaCliente", clienteService.listaClientesAtivos());
        mv.addObject("listaProfissional", profissionalService.listaProfissionalAtivo());
        mv.addObject("cliente", cliente);
        mv.addObject("agendaCliente", agendaService.listaAgendaPorCliente(cliente));
        mv.addObject("listaServico", servicoService.listaServicosAtivos());

        mv.addObject("linkMontarAgenda", ".././json-montar-agenda-por-cliente/" + idCliente);
        mv.addObject("linkEditarAgenda", ".././editar/");
        mv.addObject("abrirModal", false);

        return mv;
    }

    @PostMapping(consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE, MediaType.APPLICATION_JSON_VALUE}, headers = "content-type=application/x-www-form-urlencoded , application/json", produces = {MediaType.APPLICATION_JSON_VALUE})
    public ModelAndView salvarAgenda(@Valid Agenda agenda, BindingResult result, RedirectAttributes atributes) {
        try {
            UserSS usuario = user();
            servico = servicoService.servicoPorDescricao(agenda.getServico());
            String dataAtualizada = agendaService.adicionaDataEndComHorarioDoServico(agenda.getStart(), servico); //Data para setar no End da Agenda
           
            
            
  
            
            //System.out.println();
            
            //System.out.println(agenda.getDataInicio());
            //String tempo = servico.getTempo();
            //int horaServico = Integer.parseInt(tempo.substring(0, 2));
            //int minutoServico = Integer.parseInt(tempo.substring(3, 5));

            //System.out.println(horaServico);
            //System.out.println(minutoServico);
/*
            int horaInicial = Integer.parseInt(agenda.getHoraInicio().substring(0, 2));
            int horaFinal = Integer.parseInt(agenda.getHoraFinal().substring(0, 2));
            int minutoInicial = Integer.parseInt(agenda.getHoraInicio().substring(3, 5));
            int minutoFinal = Integer.parseInt(agenda.getHoraFinal().substring(3, 5));
           // System.out.println("horaInicial " + horaInicial);
            //System.out.println("horaFinal " + horaFinal);
           // System.out.println("minutoInicial " + minutoInicial);
           // System.out.println("minutoFinal " + minutoFinal);
            int diferencaHoraSelecionada = horaFinal - horaInicial;
            int diferencaMinutoSelecionado = minutoFinal - minutoInicial;
           // System.out.println("");

            //Verifica o Horário certo  para atividade selecionada 
            if (horaInicial > horaFinal || horaInicial == horaFinal && minutoInicial == minutoFinal || horaInicial == horaFinal && minutoFinal - minutoInicial < 15) {
                atributes.addFlashAttribute("msgError", "Horário Inválido. Por favor veirifique o horário ");
                ModelAndView mv = new ModelAndView("redirect:" + baseUrl + "/sistema/agenda");
                mv.addObject("agenda", agenda);
                return mv;
            } else if (diferencaHoraSelecionada < horaServico || diferencaHoraSelecionada <= horaServico && diferencaMinutoSelecionado < minutoServico) { //verifica se o tempo marcado com o tempo do servico
                if (horaServico == 0) {
                    String minStr = tempo.substring(3, 5) + " minutos";
                    atributes.addFlashAttribute("msgError", "Você selecionou " + diferencaHoraSelecionada + ":" + diferencaMinutoSelecionado + " hr para realizar essa atividade. O Serviço " + servico.getDescricao() + " demanda um tempo maior que o selecionado, esolha um tempo maior que  " + minStr);
                } else {
                    atributes.addFlashAttribute("msgError", "Você selecionou " + diferencaHoraSelecionada + ":" + diferencaMinutoSelecionado + " hr para realizar essa atividade. O Serviço " + servico.getDescricao() + " demanda um tempo maior que o selecionado, esolha um tempo maior que  " + servico.getTempo() + " hr");
                }
                ModelAndView mv = new ModelAndView("redirect:" + baseUrl + "/sistema/agenda");
                mv.addObject("agenda", agenda);
                return mv;
            } // Fim Verificacao de Horário inválido.

            //Valida Disponibilidade Funcionario
            
            boolean agendaVazia = agendaService.verificaListaAgendaVazia(agenda.getProfissional(), agenda.getHoraInicio(), agenda.getHoraFinal(), agenda.getDataInicio(), agenda.getIdAgenda());
            if (!(agendaVazia)) {
                atributes.addFlashAttribute("msgError", "Profissional " + agenda.getProfissional().getNome() + " não disponível no horário marcado.");
                ModelAndView mv = new ModelAndView("redirect:" + baseUrl + "/sistema/agenda/profissional/" + agenda.getProfissional().getId());
                mv.addObject("agenda", agenda);
                return mv;

            }
*/
            if (result.hasErrors()) {
                System.out.println("Erro Salvar Agenda() " + result.toString());
                return montarAgenda();
            }

            if (agenda.getIdAgenda() == null) {
                agenda.setColor("#439247");
            } else {
                agenda.setColor("");
            }

            //Seta Usuario , Hora e Data que efetuou o cadastro
            String data = "dd/MM/yyyy";
            String h = "h:mm - a";
            String hoje, hora;
            java.util.Date agora = new java.util.Date();
            SimpleDateFormat formata = new SimpleDateFormat(data);
            hoje = formata.format(agora);
            formata = new SimpleDateFormat(h);
            hora = formata.format(agora);
            
            agenda.setNomeRealizouCadastro(usuario.getNome());
            agenda.setDataRealizouCadastro(hoje);
            agenda.setHoraRealizouCadastro(hora);
            // Fim
            
            agenda.setEnd(dataAtualizada);
            agenda.setDataInicio(agenda.getStart());
            agenda.setDataFinal(agenda.getEnd());
            
            agenda.setCancelado(false);
            agenda.setTitle("m "+ agenda.getProfissional().getNome() + " , Cliente: " + agenda.getCliente().getNome() + " , Serviço: " + agenda.getServico() + " ,  Tel: " + agenda.getCliente().getCelular());
            

            ar.save(agenda);//Salva agenda criado 
            System.out.println(agenda.toString());
            ModelAndView mv = new ModelAndView("redirect:" + baseUrl + "/sistema/agenda");
            atributes.addFlashAttribute("mensagem", "Agendado com sucesso.");
            return mv;
        } catch (Exception e) {
            System.out.println("Catch  Agenda Controller POST:" + e);

            return montarAgenda();
        }

    }

    @DeleteMapping(value = "/{idAgenda}", consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE, MediaType.APPLICATION_JSON_VALUE}, headers = "content-type=application/x-www-form-urlencoded , application/json", produces = {MediaType.APPLICATION_JSON_VALUE})
    public ModelAndView apagarAgenda(RedirectAttributes atributes, @PathVariable("idAgenda") Long idAgenda, @ModelAttribute("motivoCancelamento") String motivoCancelamento) {

        Agenda agenda = ar.getOne(idAgenda);
        UserSS usuario = user();

        String data = "dd/MM/yyyy";
        String h = "h:mm - a";
        String hoje, hora;
        java.util.Date agora = new java.util.Date();;
        SimpleDateFormat formata = new SimpleDateFormat(data);
        hoje = formata.format(agora);
        formata = new SimpleDateFormat(h);
        hora = formata.format(agora);

        agenda.setNomeRealizouCancelamento(usuario.getNome());
        agenda.setDataCancelamento(hoje);
        agenda.setHoraCancelamento(hora);
        agenda.setColor("#403a3c");
        agenda.setCancelado(true);
        agenda.setMotivoCancelamento(motivoCancelamento);
        ar.save(agenda);
        ModelAndView mv = new ModelAndView("redirect:" + baseUrl + "/sistema/agenda");
        atributes.addFlashAttribute("mensagem", "Agenda cancelada com sucesso.");
        return mv;

    }

    
    // Fazer um metodo que retorna boolean para verificar disponibilidade de agenda por profissional onde usa um Ajax para consultarpela data e hora selecionada

}


<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:th="http://www.thymeleaf.org"
      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4" 
      sec:authorize="isAuthenticated()">

    <head> 
        <th:block th:include="fragments/scripts :: header" ></th:block>

        <!--Calendar css -->
        <link th:href="@{/assets/fullcalendar/fullcalendar.css}" rel="stylesheet"/>
        <link th:href="@{/assets/select2/select2.css}" rel="stylesheet" type="text/css"/>
        <link  rel="stylesheet" th:href="@{/assets/timepicker/bootstrap-timepicker.min.css}"/>
        <link href="../../static/assets/timepicker/bootstrap-datepicker.min.css" rel="stylesheet" th:href="@{/assets/timepicker/bootstrap-datepicker.min.css}"/>
        <link th:href="@{/assets/sweet-alert/sweet-alert.min.css}" rel="stylesheet" type="text/css"/>
        <link th:href="@{/assets/timepicker/bootstrap-datepicker.min.css}" rel="stylesheet" type="text/css"/>
        <link th:href="@{/assets/timepicker/bootstrap-timepicker.min.css}" rel="stylesheet" type="text/css"/>
<link th:href="@{https://rawgit.com/xdan/datetimepicker/master/jquery.datetimepicker.css}" rel="stylesheet"/>


        <script th:inline="javascript">
            function abrirAgendaPorCliente() {
            /*<![CDATA[*/

            var baseUrl = [[@{${@environment.getProperty('baseUrl') + '/sistema/agenda/cliente/'}}]];
            /*]]>*/

            var selectBox = document.getElementById("selectBox");
            var idCliente = selectBox.options[selectBox.selectedIndex].value;
            url = baseUrl + idCliente;
            location = url;
            }
        </script>
        <style>
            .modal-footer {
                margin-top: 70px;
            }
        </style>
    </head>    


    <body class="fixed-left" >

        <div id="wrapper">       
            <!--Navbar-->
            <div   th:include="navbar/navbar :: navbar"></div>
            <!--Menu-->
            <th:block th:include="menu/menu :: menu"></th:block> 
            <th:block th:include="fragments/mensagemSucesso :: mensagemSucesso"></th:block>      
            <section id ="linkMontarAgenda" th:text="${linkMontarAgenda}"></section>
            <section id ="linkEditarAgenda" th:text="${linkEditarAgenda}"></section>
            <section id ="abrirModal" th:text="${abrirModal}"></section>
            <!-- ============================================================== -->
            <!-- Start right Content here -->
            <!-- ============================================================== -->                   
            <div class="content-page">
                <!-- Start content -->
                <div class="content">

                    <div class="container">
                        <div class="row" id="legenda">

                        </div>
                        <div class="row">

                            <div class="col-md-9">
                                <div class="panel panel-default">
                                    <div class="panel-body">
                                        <div class="row">
                                            <div class="col-md-12 col-sm-12 col-xs-12">
                                                <div id="calendar"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div> <!-- end col -->

                            <div class="col-md-3">
                                <div class="widget">
                                    <div class="widget-body">
                                        <div class="row">
                                            <div class="col-md-12 col-sm-12 col-xs-12">

                                                <a  href="#" data-toggle="modal" data-target="#novoEvento" class="btn btn-lg btn-primary btn-block waves-effect waves-light">
                                                    <i class="fa fa-plus"></i> Agendar
                                                </a>
                                                <a sec:authorize="hasRole('ADMINISTRADOR')" href="#"  th:href="@{${@environment.getProperty('baseUrl')+'/sistema/agenda/cancelado'}}" class="btn btn-lg btn-inverse btn-block waves-effect waves-light">
                                                    <i class="fa fa-remove"></i> Canceladas
                                                </a>
                                                <div id="external-events" class="m-t-20">

                                                    <div th:if="${cliente}" class="external-event bg-info" data-class="bg-purple" style="position: relative;">
                                                        <a href="#" style="margin: 10px 0;padding: 6px 10px;color: #ffffff;">Cliente - <span th:text="${cliente.nome}"></span></a>
                                                    </div>

                                                    <div th:if="${profissional}" class="external-event bg-info" data-class="bg-purple" style="position: relative;">
                                                        <a href="#" style="margin: 10px 0;padding: 6px 10px;color: #ffffff;">Profissional - <span th:text="${profissional.nome}"></span></a>
                                                    </div>


                                                    <div class="col-md-12">
                                                        <div class="input-group">
                                                            <span class="input-group-addon "><i class="fa col-md-5"><b>Clientes</b></i></span>
                                                            <select class="form-control"  id="selectBox" th:if="${listaCliente}" onchange="abrirAgendaPorCliente();" >
                                                                <option value=''></option>
                                                                <option th:each=" cliente : ${listaCliente}"  th:value="${cliente.id}" th:text="${cliente.nome + ' - '+cliente.nivelCliente}"  ></option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                    <br></br>
                                                    <hr></hr>
                                                    <p>Seleciona o profissional para abrir sua Agenda</p>
                                                    <div class="external-event bg-purple" data-class="bg-purple" style="position: relative;">
                                                        <a href="#"  th:href="@{${@environment.getProperty('baseUrl')+'/sistema/agenda'}}" style="margin: 10px 0;padding: 6px 10px;color: #ffffff;">TODOS</a>
                                                    </div> 
                                                    <div th:each=" profissional : ${listaProfissional}" class="external-event bg-purple" data-class="bg-purple" style="position: relative;">
                                                        <a href="#"  th:href="@{${@environment.getProperty('baseUrl')+'/sistema/agenda/profissional/'+profissional.id}}" style="margin: 10px 0;padding: 6px 10px;color: #ffffff;"><span th:text="${profissional.nome}"></span></a>
                                                    </div> 
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div> <!-- end col-->
                        </div><!--Fim Row -->
                        <div class ="row">
                            <!-- BEGIN MODAL -->



                            <!-- Modal Add NOVO EVENTO -->
                            <div th:if="not ${agenda.cancelado}" class="modal fade" id="novoEvento" >
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h4 th:if="${abrirModal}" class="modal-title"><strong>Reagendamento</strong> </h4>
                                            <h4 th:if="not ${abrirModal}" class="modal-title"><strong>Cadastrar Agenda</strong> </h4>
                                        </div>
                                        <div class="modal-body">
                                            <form role="form" enctype="application/x-www-form-urlencodeds" th:object="${agenda}"  th:action="@{${@environment.getProperty('baseUrl')+'/sistema/agenda'}}" th:method="POST">
                                                <th:block th:include="fragments/mensagemErro :: mensagemErro"></th:block> 

                                                <div class="row">

                                                    <div><input type="hidden" th:field="*{idAgenda}" id="idAgenda"/></div>

                                                    <div class="col-md-6 ">
                                                        <label class="control-label">Profissional</label>
                                                        <select class="form-control" th:name="${profissional}" th:field="*{profissional}" required="required" id="profissional">
                                                            <option value=''></option>
                                                            <option th:each=" profissional : ${listaProfissional}"  th:value="${profissional.id}"  th:text="${profissional.nome}"  ></option>
                                                        </select>
                                                    </div> 


                                                    <div class="col-md-6">
                                                        <label class="control-label">Cliente</label>
                                                        <select class="form-control" th:name="${cliente}" th:field="*{cliente}" required="required" id="cliente">
                                                            <option value=''></option>
                                                            <option th:each=" cliente : ${listaCliente}"  th:value="${cliente.id}" th:text="${cliente.nome}" ></option>
                                                        </select>
                                                    </div>

                                                    <div class="col-md-6">
                                                        <label class="control-label">Serviço</label>
                                                        <select class="form-control" th:name="${servico}" th:field="*{servico}" required="required" id="servico" name="servico">
                                                            <option value=''></option>
                                                            <option th:each=" servico : ${listaServico}"  th:value="${servico.descricao}" th:text="${servico.descricao +' - ' + servico.tempo+' hr'}"  ></option>
                                                        </select>
                                                    </div>


                                                    <div class="col-md-6 ">
                                                        
                                                            <label class="control-label">Horário</label>
                                                            <div class=" bootstrap-timepicker ">
                                                                <input class="form-control" id="datepicker" readonly="readonly" type="text" name="horaInicio"  th:field="*{start}" required="required" />
                                                                
                                                            </div>
                                                      
                                                    </div>

                                                    
                                                </div>


                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-default waves-effect " data-dismiss="modal" th:if="not ${abrirModal}">Voltar</button>
                                                    <a type="button" href="#" th:href="@{${@environment.getProperty('baseUrl')+'/sistema/agenda'}}" class="btn btn-default waves-effect" th:if="${abrirModal}" >Voltar</a>
                                                    <button type="submit" class="btn btn-success waves-effect waves-light save-category" ><span th:if="${agenda.idAgenda}">Reagendar</span><span th:if="not ${agenda.idAgenda}">Agendar</span></button>
                                                </div>
                                            </form>

                                            <div th:if="${agenda.idAgenda}">
                                                <hr></hr>
                                                <p><b><span>Agendado por : </span></b><span th:text="${nomeRealizouCadastro}"></span></p>
                                                <p><b><span>Data  : </span></b><span th:text="${dataRealizouCadastro}"></span></p>
                                                <p><b><span>Hora  : </span></b><span th:text="${horaRealizouCadastro}"></span></p>
                                                <form  th:action="@{${@environment.getProperty('baseUrl')+'/sistema/agenda/'+{agenda.idAgenda}}}" th:method="DELETE" >                                                                         
                                                    <hr></hr>
                                                    <a  class="btn btn-danger pull-right" th:href="@{'#'+${agenda.idAgenda}}" th:title="'Cancelar agenda  ' + ${agenda.cliente.nome}"  data-toggle="modal" >Cancelar Agendamento    </a>

                                                    <!--Modal Para confirmar Exclusão-->
                                                    <div th:id="${agenda.idAgenda}" th:class="@{'modal fade bs-example-modal-sm '+${agenda.idAgenda}}" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
                                                        <div class="modal-dialog modal-sm">
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <h4 class="modal-title" id="mySmallModalLabel"><span class="modal-title fa  fa-exclamation-circle" style="color:#a11"></span> Atenção</h4>
                                                                </div>
                                                                <div class="modal-body">
                                                                    <p>Deseja realmente cancelar o agendamento de  <span th:text="${agenda.cliente.nome}"></span>?</p>
                                                                    <p><b>Motivo:</b></p>


                                                                    <input required="required" title="Descreva o motivo do cancelamento" class="form-control" type="text"  minlength="10"  maxlength="100" name="motivoCancelamento"/>

                                                                </div>
                                                                <div class="modal-footer">
                                                                    <a type="button" href="#" th:href="@{${@environment.getProperty('baseUrl')+'/sistema/agenda'}}" class="btn btn-default waves-effect" th:if="${abrirModal}" >Não</a>
                                                                    <button type="submit" class="btn btn-success waves-effect">Sim, cancelar agendamento</button>

                                                                </div>
                                                            </div><!-- /.modal-content -->
                                                        </div><!-- /.modal-dialog -->
                                                    </div><!-- /.modal -->
                                                </form><!-- Fim Form -->  
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            </div>
                            <!-- END MODAL -->

                            <!-- Modal Erro Ao Cadastrar Data Errada -->
                            <button class="btn btn-info waves-effect waves-light btn-sm" id="sa-basic"  style="visibility: hidden;"></button>

                            <!--Modal Mostrar Detalhes do Cancelamento da Agenda -->
                            <th:block th:if="${agenda.cancelado}" sec:authorize="hasRole('ADMINISTRADOR')">
                                <div class="modal fade" id="novoEvento">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">

                                                <h4 class="modal-title"><strong>AGENDA CANCELADA</strong> </h4>
                                            </div>
                                            <div class="modal-body">
                                                <!-- Personal-Information -->
                                                <div class="panel panel-default panel-fill">
                                                    <div class="panel-heading">
                                                        <h3 class="panel-title">Detalhes Cancelamento</h3>
                                                    </div>
                                                    <div class="panel-body">
                                                        <div class="about-info-p">
                                                            <strong>Cliente: </strong>
                                                            <br></br>
                                                            <p class="text-muted" th:text="${agenda.cliente.nome}"></p>
                                                        </div>
                                                        <div class="about-info-p">
                                                            <strong>Email: </strong>
                                                            <br></br>
                                                            <p class="text-muted" th:text="${agenda.cliente.email}"></p>
                                                        </div>
                                                        <div class="about-info-p">
                                                            <strong>Telefone: </strong>
                                                            <br></br>
                                                            <p class="text-muted" th:text="${agenda.cliente.telefone}"></p>
                                                        </div>
                                                        <div class="about-info-p">
                                                            <strong>Celular: </strong>
                                                            <br></br>
                                                            <p class="text-muted" th:text="${agenda.cliente.celular}"></p>
                                                        </div>

                                                        <div class="about-info-p">
                                                            <strong>Profissional que efetuou cancelamento: </strong>
                                                            <br></br>
                                                            <p class="text-muted" th:text="${agenda.nomeRealizouCancelamento}"></p>
                                                        </div>
                                                        <div class="about-info-p">
                                                            <strong>Data:</strong>
                                                            <br></br>
                                                            <p class="text-muted" th:text="${agenda.dataCancelamento +' às '+ agenda.horaCancelamento}" ></p>
                                                        </div>
                                                        <div class="about-info-p">
                                                            <strong>Motivo:</strong>
                                                            <br></br>
                                                            <p class="text-muted" th:text="${agenda.motivoCancelamento}"></p>
                                                        </div>

                                                    </div>
                                                </div>
                                                <!-- Personal-Information -->

                                                <div class="modal-footer">
                                                    <a type="button" href="#" th:href="@{${@environment.getProperty('baseUrl')+'/sistema/agenda/cancelado'}}" class="btn btn-default waves-effect" th:if="${abrirModal}" >Voltar</a>


                                                </div>

                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </th:block>
                            <!-- END MODAL -->




                        </div>

                    </div> <!-- container -->
                </div> <!-- content -->
            </div>
            <!-- ============================================================== -->
            <!-- Start right Content here -->
            <!-- ============================================================== --> 
        </div> <!--Navbar-->

        <script>
            var resizefunc = [];
        </script>

        <!--Scripts-->
        <th:block th:include="fragments/scripts :: scripts"></th:block> 
        <!-- BEGIN PAGE CALENDAR -->

        <script th:src="@{/assets/fullcalendar/moment.min.js}"></script>
        <script th:src="@{/assets/fullcalendar/fullcalendar.min.js}"></script>
        <script th:src="@{/assets/fullcalendar/pt-br.js}"></script>

        <!-- Alert Menssagem -->
        <script th:src="@{/assets/sweet-alert/sweet-alert.init.js}"></script>
        <script th:src="@{/assets/sweet-alert/sweet-alert.min.js}"></script>

        <!-- TimePicker -->
        <script th:src="@{/assets/timepicker/bootstrap-datepicker.js}"></script>
        <script th:src="@{/assets/timepicker/bootstrap-timepicker.min.js}"></script>

        <script th:src="@{https://rawgit.com/xdan/datetimepicker/master/build/jquery.datetimepicker.full.js}"></script>



        <script>
            var dayOfWeek = {};
            var horarios = ['05:00', '05:15', '05:30','06:00', '06:15', '06:30','07:00', '07:15', '07:30','08:00', '08:15', '08:30','09:00', '09:15', '09:30','10:00', '10:15', '10:30','11:00', '11:15', '11:30','12:00', '12:15', '12:30','13:00', '13:15', '13:30','14:00', '14:15', '14:30','15:00', '15:15', '15:30','16:00', '16:15', '16:30','17:00', '17:15', '17:30','18:00', '18:15', '18:30','19:00', '19:15', '19:30','20:00', '20:15', '20:30','21:00', '21:15', '21:30','22:00', '22:15', '22:30','23:00', '23:15', '23:30','00:00'] ;
            dayOfWeek[0] = { desc: "Dom", allowTimes: horarios };
            dayOfWeek[1] = { desc: "Seg", allowTimes: horarios };
            dayOfWeek[2] = { desc: "Ter", allowTimes: horarios };
            dayOfWeek[3] = { desc: "Qua", allowTimes: horarios };
            dayOfWeek[4] = { desc: "Qui", allowTimes: horarios };
            dayOfWeek[5] = { desc: "Sex", allowTimes: horarios };
            dayOfWeek[6] = { desc: "Sab", allowTimes: horarios };
            $.datetimepicker.setLocale('pt');
            var data = new Date();
                $('#datepicker').datetimepicker({
                    allowTimes: dayOfWeek[data.getDay()].allowTimes,
                    
                    onChangeDateTime:function(date, input){
                        data = date;
                        this.setOptions({
                            allowTimes: dayOfWeek[data.getDay()].allowTimes
                        });
                    },
                    onGenerate:function(ct){
                       // $(this).find('.xdsoft_date.xdsoft_weekend').addClass('xdsoft_disabled');
                    },
                    format: 'd/m/Y H:i',
                    minDate: 0
                });

$('#datepicker').change(function(){
    console.log($('#datepicker').val());
});

        </script>


        <script type="text/javascript">
            var linkMontarAgenda = $("#linkMontarAgenda").html();
            var linkEditarAgenda = $("#linkEditarAgenda").html();
            var abrirModal = $("#abrirModal").html();
            if (abrirModal == "true"){
            $("#novoEvento").modal({backdrop: "static"});
            }

            var url = linkMontarAgenda;
            $(document).ready(function () {
            var defaultEvents = {
            url: url,
            };
            
            $('#calendar').fullCalendar({
            eventClick: function (calEvent) {
            window.location.href = linkEditarAgenda + calEvent.idAgenda;
            $("#novoEvent").modal({backdrop: "static"});
            // change the border color just for fun


            },
                    select: function (start, end, allDay) {
                    var strData = start.toString();
                    var partesData = strData.split("-");
                    var dia = parseInt(partesData[2]);
                    var data = new Date(partesData[0], partesData[1] - 1, dia + 1);
                    if (!(data > new Date())){
                    $('#sa-basic').click(function(){
                    swal({
                    title: "Ops, você não pode agendar nessa data!",
                            text: "Escolha uma data a partir de hoje.",
                            type: "warning",
                            showCancelButton: false,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "OK",
                            closeOnConfirm: true

                    });
                    });
                    $('#sa-basic').click();
                    } else{
                    var a = $("#dataInicio");
                    a.val(start);
                    $("#novoEvento").modal({backdrop: "static"});
                    }
                    },
                    slotDuration: '00:15:00',
                    minTime: '05:00:00',
                    maxTime: '24:00:00',
                    defaultView: 'month',
                    handleWindowResize: true,
                    height: $(window).height() - 200,
                    header: {
                    left: 'prev,next today',
                            center: 'title',
                            right: 'month,agendaWeek,agendaDay'
                    },
                    defaultDate: Date(),
                    editable: true,
                    eventLimit: true, selectable: true,
                    lang: 'pt-br',
                    events: defaultEvents,
                    drop: function (date) {
                    $this.onDrop($(this), date);
                    },
                    buttonText: {
                    today: 'Hoje',
                            month: 'Mês',
                            week: 'Semana',
                            day: 'Dia'
                    }

            });
            });
        </script>
        <script>

            jQuery(document).ready(function () {
            //Funcoes de Mensagens de Aviso


            var hoje = new Date();
            var dd = hoje.getDate();
            var mm = hoje.getMonth() + 1; //January is 0!
            var yyyy = hoje.getFullYear();
            if (!(dd > 10)){
            dd = '0' + dd;
            }
            if (!(mm > 10)){
            mm = '0' + mm;
            }
            var hoje = yyyy + '-' + mm + '-' + dd;
            $('#dataInicio').attr({
            'min' : hoje
            });
            // Time Picker




            $('#servico').change(function(){
            var selObj = document.getElementById('servico');
            var selecTedIndex = selObj.selectedIndex;
            var textoSelecionado = selObj.options[selecTedIndex].text;
            console.log(textoSelecionado);
            var saltoHora = textoSelecionado.toString().length - 8;
            var saltoMinuto = textoSelecionado.toString().length - 5;
            hora = textoSelecionado.toString().substr(saltoHora, 5);
            minuto = textoSelecionado.toString().substr(saltoMinuto, 2);
            console.log("Hora = " + hora);
            console.log("Minuto = " + minuto);
            if (hora == 00){
            intervalo = minuto;
            } else{
            hora = hora * 60;
            intervalo = parseInt(hora) + parseInt(minuto);
            }

            });
            jQuery('#horaInicio').timepicker({
            showMeridian: false,
                    minuteStep: 15,
                    defaultTime: '08:00 AM'
            });
            jQuery('#horaFinal').timepicker({showMeridian: false,
                    minuteStep: 15,
                    defaultTime: '08:00 AM'
            });
            $('#link').on('change', function () {
            var url = $(this).val();
            if (url) {
            window.location.href = url;
            }
            return false;
            });
            });
        </script>





    </body>
</html>



